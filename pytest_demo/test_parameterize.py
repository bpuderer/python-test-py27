import pytest


#parameterize a fixture for multiple invocations
@pytest.fixture(params=[0, 1, 2])
def test_data(request):
    print '\n*function name:', request.function.__name__
    return request.param

#ids to be used as part of test id instead of autogenerated one
@pytest.fixture(params=[0, 1, 2], ids=['zero', 'one', 'two'])
def test_data_ids(request):
    print '\n*function name:', request.function.__name__
    return request.param

def test_is_even(test_data):
    print 'test_data: {}'.format(test_data)
    assert test_data % 2 == 0

def test_is_even_ids(test_data_ids):
    print 'test_data_ids: {}'.format(test_data_ids)
    assert test_data_ids % 2 == 0



def is_even(num):
    return num % 2 == 0

#for function or class level
@pytest.mark.parametrize("test_input,expected", [
    (0, True),
    (1, False),
    (2, True),
])
def test_is_even_param(test_input, expected):
    assert is_even(test_input) == expected


#can stack to get combinations
#from https://pytest.org/latest/parametrize.html
@pytest.mark.parametrize("x", [0, 1])
@pytest.mark.parametrize("y", [2, 3])
def test_foo(x, y):
    print x, y
