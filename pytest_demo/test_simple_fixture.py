import pytest


@pytest.fixture()
def setup1():
    print '\nsetup1'

@pytest.fixture()
def setup2():
    print 'setup2'

#using funcarg / funcarg mechanism
def test_1_setup1_funcarg(setup1):
    print 'test_1_setup1_funcarg()'

def test_2_no_fixtures():
    print '\ntest_2_no_fixtures()'

@pytest.mark.usefixtures('setup1')
def test_3_setup1_marker():
    print 'test_3_setup1_marker()'

#can use more than one fixture
def test_4_setup1_and_setup2(setup1, setup2):
    print 'test_4_setup1_and_setup2()'



#return something from fixture
@pytest.fixture()
def return_data():
    data = {'foo': 0, 'bar': 1}
    return data

def test_return_data(return_data):
    print '\nreturn data from return_data():', return_data
    assert return_data['bar'] == 1



#parameterizing a fixture for multiple invocations
@pytest.fixture(params=[0, 1, 2])
def test_data(request):
    print '\n*function name:', request.function.__name__
    return request.param

#ids to be used as part of test id instead of autogenerated one
@pytest.fixture(params=[0, 1, 2], ids=['zero', 'one', 'two'])
def test_data_ids(request):
    print '\n*function name:', request.function.__name__
    return request.param

def test_is_even(test_data):
    print 'test_data: {}'.format(test_data)
    assert test_data % 2 == 0

def test_is_even_ids(test_data_ids):
    print 'test_data_ids: {}'.format(test_data_ids)
    assert test_data_ids % 2 == 0
